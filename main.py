import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Configura o backend do Matplotlib para n칚o interativo (essencial para servidores)
plt.switch_backend('Agg')
import streamlit as st # NOVO: Importe o Streamlit
import io # Para lidar com o gr치fico em mem칩ria

plt.switch_backend('Agg')

from langchain.prompts import MessagesPlaceholder
from langchain_experimental.agents.agent_toolkits import create_pandas_dataframe_agent
from langchain_openai import ChatOpenAI
from langchain.agents import AgentExecutor
from langchain.agents.agent_types import AgentType
from langchain.pydantic_v1 import BaseModel, Field
from langchain.memory import ConversationBufferWindowMemory
from langchain.tools import tool
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

# =================================================================
# 1. Configura칞칚o do Ambiente e Inicializa칞칚o do Streamlit
# =================================================================

import os

# 1. T칤tulo do Aplicativo (Opcional, mas 칰til)
st.title("Configuracao chave OPENAI_API_KEY")
st.markdown("---")

# 2. Coleta da Chave API (Inicializa칞칚o da Chave)
# Use st.session_state para um gerenciamento de estado mais robusto que os.environ
if "openai_key_valid" not in st.session_state:
    st.session_state["openai_key_valid"] = False

# Tenta obter a chave da sess칚o, se j치 foi inserida
user_api_key = st.session_state.get("user_api_key", "")

# Cria o campo de entrada para o usu치rio
user_api_key_input = st.text_input(
    "Insira sua OpenAI API Key:",
    value=user_api_key,
    type="password"
)

if user_api_key_input:
    # Salva a chave na sess칚o e no ambiente para a biblioteca OpenAI
    st.session_state["user_api_key"] = user_api_key_input
    os.environ["OPENAI_API_KEY"] = user_api_key_input
    st.session_state["openai_key_valid"] = True
    st.success("Chave API configurada com sucesso!")
    # Recarrega o app para prosseguir (opcional, mas limpa a interface)
    #st.rerun() 
else:
    # Se a chave n칚o foi inserida, exibe uma mensagem de aviso
    st.warning("Por favor, insira sua chave API para liberar a aplica칞칚o.")

# 3. L칩gica Principal do Aplicativo (Port칚o de Execu칞칚o)
# O bloco 'if' garante que o c칩digo s칩 칠 executado SE a chave for v치lida.
if st.session_state["openai_key_valid"]:
    
    # IMPORTANTE: A partir daqui, voc칡 pode inicializar o cliente OpenAI
    # (ou qualquer outra biblioteca que use a chave API).
    # Exemplo:
    # from openai import OpenAI
    # client = OpenAI()
    
    st.subheader("游꿀 Voce j치 pode utilizar a Aplica칞칚o!")
    
    # O restante da sua aplica칞칚o (widgets, chamadas de API, etc.)
    # deve vir DENTRO deste bloco 'if'.
    #st.text_area("Seu input para o modelo:", "Ol치, como posso ajudar?")
    # ... outros elementos da UI
    

    # Define o t칤tulo da aplica칞칚o Streamlit
    st.set_page_config(page_title="Agente de An치lise de Dados com LangChain/Streamlit", layout="wide")
    st.title("游뱄 Agente de An치lise de Dados (LangChain + Streamlit)")
    st.caption("Fa칞a upload de um CSV e comece a analisar. A visualiza칞칚o de clusteriza칞칚o est치 dispon칤vel via Tool.")

    # 2. Configura칞칚o das Ferramentas
    # O Streamlit n칚o deve rodar plt.show(), mas sim exibir o objeto Figure.
    # A Tool agora salva o gr치fico em um buffer de mem칩ria e o coloca no session_state.

    @tool
    def run_plotting_code(plotting_code: str) -> str:
        """
        Executa um bloco de c칩digo Python Matplotlib/Seaborn para gerar um gr치fico. 
        O c칩digo DEVE usar o DataFrame 'df' e N츾O DEVE conter plt.show() ou plt.close().
        
        Exemplo de c칩digo: 'sns.histplot(df['coluna'], kde=True)'
        """
        # --- NOVO: RE-IMPORTA칂츾O EXPL칈CITA PARA GARANTIR ESCOPO ---
        # Isso garante que plt e sns estejam dispon칤veis localmente
        # mesmo que o LangChain execute em um escopo restrito.
        import matplotlib.pyplot as plt # Importa칞칚o necess치ria para plt
        import seaborn as sns           # Importa칞칚o necess치ria para sns
        # -----------------------------------------------------------
        if 'df' not in st.session_state or st.session_state.df is None:
            return "ERRO: DataFrame n칚o carregado. N칚o 칠 poss칤vel plotar."
        
        df = st.session_state.df # O c칩digo ser치 executado com acesso a este df
        
        # Prepara o ambiente de execu칞칚o
        local_scope = {'df': df, 'plt': plt, 'sns': sns} 
        
        # Cria uma nova figura no in칤cio para garantir que o Streamlit capture o contexto
        fig, ax = plt.subplots(figsize=(8, 6))
        local_scope['fig'] = fig
        local_scope['ax'] = ax
        
        try:
            # Executa o c칩digo de plotagem. O c칩digo deve usar 'ax' e n칚o criar uma nova figura.
            exec(plotting_code, globals(), local_scope) 
            
            # O c칩digo de plotagem 칠 executado e o objeto 'fig' 칠 populado.
            
            # Armazena a figura no Session State para exibi칞칚o pelo Streamlit
            st.session_state['general_plot_fig'] = fig 
            
            # Fecha o objeto Matplotlib localmente
            plt.close(fig) 

            # === CORRE칂츾O EXTRA (SE NECESS츼RIO) ===
            # st.rerun() # Adicione esta linha APENAS se o problema persistir
            # =======================================
            # NOVO RETURN: O Agente deve interpretar isso como sucesso
            return "Plotagem finalizada. Por favor, gere uma resposta amig치vel para o usu치rio sobre a visualiza칞칚o estar pronta no frontend."

            
        except Exception as e:
            # Se o c칩digo do LLM falhar (coluna inexistente, erro de sintaxe)
            plt.close('all') # Limpa qualquer figura aberta por erro
            return f"ERRO ao executar o c칩digo de plotagem: {e}. O c칩digo que causou o erro foi: {plotting_code}. Por favor, corrija e tente novamente ou sugira outra an치lise."

    @tool
    def run_clustering_analysis() -> str:
        """
        Executa a An치lise de Componentes Principais (PCA) seguida pelo algoritmo K-Means 
        para identificar agrupamentos nos dados usando o DataFrame na sess칚o 'df'.
        
        A Tool gera o gr치fico e o armazena no Streamlit Session State para exibi칞칚o.
            
        Retorna uma string confirmando a a칞칚o e instruindo o usu치rio.
        """
        # Acessa o DataFrame 'df' do Streamlit Session State
        if 'df' not in st.session_state or st.session_state.df is None:
            return "ERRO: O DataFrame ainda n칚o foi carregado. Por favor, carregue um arquivo CSV primeiro."
        
        df = st.session_state.df # Pega o DataFrame da sess칚o

        try:
            # st.write("\n[EXECU칂츾O DA TOOL] Rodando PCA/KMeans e gerando gr치fico...")
            
            # O restante da l칩gica de execu칞칚o permanece o mesmo
            df_cluster = df.drop(['Time', 'Class'], axis=1, errors='ignore').select_dtypes(include=['number'])
            
            if df_cluster.empty:
                return "AVISO: N칚o h치 colunas num칠ricas suficientes para o PCA/KMeans. N칚o foi poss칤vel gerar o gr치fico."

            # Reduzindo a dimensionalidade
            pca = PCA(n_components=2)
            df_pca = pca.fit_transform(df_cluster)
            
            # Aplicando o algoritmo KMeans
            # (N=2 칠 um chute inicial, em um cen치rio real, seria melhor usar Elbow Method)
            kmeans = KMeans(n_clusters=2, random_state=42, n_init=10)
            clusters = kmeans.fit_predict(df_pca)
            
            # NOVO: Armazena APENAS os dados brutos e metadata no estado da sess칚o
            st.session_state['clustering_data'] = {
                'pca_components': df_pca,
                'clusters': clusters,
                'variance_ratio': pca.explained_variance_ratio_
            }

            # Garante que n칚o haja figura antiga no state
            st.session_state['clustering_plot'] = None 
            
            # O LLM confirma que os dados para plotagem foram gerados
            return "Plotagem finalizada. Os dados de agrupamentos (PCA/K-Means) foram calculados com sucesso. A visualiza칞칚o de clusteriza칞칚o foi gerada e ser치 exibida."
            
        except Exception as e:
            return f"ERRO ao executar a an치lise de clusteriza칞칚o: {e}"

    # =================================================================
    # 3. Carregamento e Inicializa칞칚o do DataFrame (Streamlit)
    # =================================================================

    # Inicializa o estado da sess칚o
    if 'df' not in st.session_state:
        st.session_state.df = None
    if 'agent_executor' not in st.session_state:
        st.session_state.agent_executor = None
    if 'messages' not in st.session_state:
        st.session_state.messages = []
    if 'clustering_plot' not in st.session_state:
        st.session_state.clustering_plot = None

    # Fun칞칚o de upload (substitui a carga est치tica local)
    def load_data_and_init_agent(uploaded_file):
        try:
            # Carrega o DF diretamente da mem칩ria (melhor pr치tica Streamlit)
            df = pd.read_csv(uploaded_file)
            st.session_state.df = df
            
            # Informa칞칚o visual no sidebar
            st.sidebar.success(f"CSV carregado! {len(df)} linhas, {len(df.columns)} colunas.")
            st.sidebar.dataframe(df.head(), use_container_width=True)
            
            # Inicializa칞칚o do Agente (movido para c치 para ser chamado APENAS ap칩s o upload)
            # Configure sua chave de API do OpenAI - DEVE SER UMA VARI츼VEL DE AMBIENTE
            
            llm = ChatOpenAI(temperature=0.0, model_name="gpt-4")

            # INSTRU칂츾O ADICIONAL CR칈TICA NO PROMPT DO AGENTE PANDAS
            CUSTOM_PREFIX = """Voc칡 칠 um assistente de an치lise de dados. Voc칡 tem acesso a um DataFrame Pandas chamado 'df', Matplotlib ('plt') e Seaborn ('sns').
            Voc칡 칠 um agente N츾O-GUI (sem janela gr치fica).

            1.  **VISUALIZA칂츾O (TODOS os gr치ficos, exceto clusteriza칞칚o):** Para qualquer tipo de gr치fico (histograma, scatter, boxplot, etc.),
                **VOC칅 DEVE SEMPRE** usar a Tool `run_plotting_code`. O argumento `plotting_code` deve ser o c칩digo Python **completo** (uma 칰nica linha ou um bloco) 
                que **usa as vari치veis `df`, `plt`, `sns` e `ax`**. NUNCA use `plt.show()` ou `plt.close()` dentro do c칩digo que voc칡 fornece a esta Tool.
                * Exemplo de chamada: run_plotting_code(plotting_code="sns.scatterplot(x='V1', y='V2', data=df, ax=ax)")
            2.  **VISUALIZA칂츾O DE CLUSTERIZA칂츾O:** Para an치lise K-Means/PCA, **VOC칅 DEVE SEMPRE** usar a Tool `run_clustering_analysis`.
            3.  **C츼LCULOS/DADOS:** Para todas as outras perguntas (m칠dia, filtro, contagem), use o c칩digo Python/Pandas (`python_repl_ast`). 
                **SEMPRE** chame **plt.close('all')** ap칩s qualquer c칩digo de plotagem do Pandas.
            """

            # 1. Tool principal (an치lise textual/c치lculos do DataFrame)
            pandas_agent_executor = create_pandas_dataframe_agent(
                llm,
                df,
                verbose=False, 
                agent_type=AgentType.OPENAI_FUNCTIONS,
                allow_dangerous_code=True,
                # Adicionando o prefixo personalizado
                prefix=CUSTOM_PREFIX 
            )

            # 2. Tool de Clusteriza칞칚o 
            clustering_tool = run_clustering_analysis
            general_plotting_tool = run_plotting_code # NOVO: Tool Universal de Plotagem

            # 3. Cria칞칚o da Mem칩ria
            # O Streamlit cuida de manter o estado, a mem칩ria do LangChain armazena o hist칩rico do LLM
            memory = ConversationBufferWindowMemory(
                k=5, 
                memory_key="chat_history", 
                return_messages=True 
            )

            # 4. Configura칞칚o das Mensagens do Prompt
            chat_history_message = MessagesPlaceholder(variable_name="chat_history")
            agent_scratchpad = MessagesPlaceholder(variable_name="agent_scratchpad")
            
            # 5. Agente Pai: Combina todas as ferramentas
            from langchain.agents import initialize_agent
            
            tools = [
                clustering_tool, 
                general_plotting_tool, # NOVO: Adiciona a tool de plotagem
                pandas_agent_executor.tools[0] # Pega a Tool 'python_repl_ast' do agente Pandas
            ]

            agent_executor = initialize_agent(
                tools,
                llm,
                agent=AgentType.OPENAI_FUNCTIONS,
                verbose=False, # Definir como False no Streamlit para evitar polui칞칚o visual
                memory=memory,
                agent_kwargs={
                    "extra_prompt_messages": [chat_history_message, agent_scratchpad],
                    "input_variables": ["input", "agent_scratchpad", "chat_history"],
                }
            )
            
            st.session_state.agent_executor = agent_executor
            
            # Primeira mensagem para o chat
            st.session_state.messages.append({"role": "assistant", "content": f"O DataFrame com {len(df)} linhas foi carregado. Estou pronto para sua an치lise. Posso calcular estat칤sticas, ou tente a tool de clusteriza칞칚o com o comando: **run_clustering_analysis()**"})
            
        except Exception as e:
            st.error(f"Erro na inicializa칞칚o do agente: {e}. Verifique se a vari치vel OPENAI_API_KEY est치 configurada no seu ambiente.")

    # Widget de Upload na Sidebar
    uploaded_file = st.sidebar.file_uploader("1. Carregue seu Arquivo CSV", type="csv")

    if uploaded_file is not None and st.session_state.df is None:
        # Se um arquivo foi carregado e o DF ainda n칚o est치 na sess칚o
        load_data_and_init_agent(uploaded_file)
    elif uploaded_file is None and st.session_state.df is not None:
        # Se o DF j치 est치 na sess칚o (por exemplo, ap칩s um refresh), mantenha-o.
        pass
    elif st.session_state.df is None:
        # Se n칚o h치 arquivo e nem DF, exibe a instru칞칚o.
        st.info("Por favor, use o painel lateral para carregar um arquivo CSV e iniciar o agente.")


    # =================================================================
    # 4. Interface de Chat (Substitui o Loop Interativo)
    # =================================================================

    # Fun칞칚o para interagir com o agente
    def ask_agent(query):
        if st.session_state.agent_executor is None:
            return "Agente n칚o inicializado. Por favor, carregue o arquivo CSV primeiro."
            
        try:
            # AQUI o agente faz a chamada e usa as tools, incluindo a run_clustering_analysis
            response = st.session_state.agent_executor.invoke({"input": query})['output']
            return response
        except Exception as e:
            return f"Ocorreu um erro no Agente: {e}"


    # Exibe o hist칩rico de mensagens
    for msg in st.session_state.messages:
        st.chat_message(msg["role"]).write(msg["content"])

    # Exibe o gr치fico se a tool 'run_clustering_analysis' o gerou
    # Fun칞칚o de plotagem que garante que a figura 칠 criada no ciclo de renderiza칞칚o do Streamlit
    def display_clustering_plot():
        data = st.session_state.get('clustering_data')
        if data is None:
            return # N칚o h치 dados para plotar

        # Cria a figura (garantindo que ela 칠 criada no contexto Streamlit)
        fig, ax = plt.subplots(figsize=(8, 6))
        
        # Usa os dados salvos pela Tool
        df_pca = data['pca_components']
        clusters = data['clusters']
        variance_ratio = data['variance_ratio']

        ax.scatter(df_pca[:, 0], df_pca[:, 1], c=clusters, cmap='viridis', alpha=0.7)
        ax.set_title('Agrupamentos K-Means ap칩s Redu칞칚o PCA (2 Componentes)')
        ax.set_xlabel(f'Componente Principal 1 ({variance_ratio[0]*100:.2f}%)')
        ax.set_ylabel(f'Componente Principal 2 ({variance_ratio[1]*100:.2f}%)')
        
        st.subheader("Visualiza칞칚o de Agrupamento Gerada pela Tool:")
        st.pyplot(fig) # Streamlit renderiza a figura
        plt.close(fig) # Fecha a figura Matplotlib para liberar mem칩ria

        # Adiciona um bot칚o para limpar os dados e o gr치fico
        if st.button("Limpar Gr치fico de Clusteriza칞칚o", key="clear_plot_btn"):
            st.session_state.clustering_data = None
            st.rerun() # Re-executa para remover o gr치fico 

    # Exibe o gr치fico de Clusteriza칞칚o (usando dados para recriar a figura)
    if st.session_state.get('clustering_data') is not None:
        # A l칩gica de display_clustering_plot (que recria a fig e chama st.pyplot)
        # deve ser chamada aqui.
        display_clustering_plot()
        st.divider()

    # =================================================================
    # BLOCO DE EXIBI칂츾O DE PLOTAGEM GERAL
    # =================================================================

    # Exibe o gr치fico de Prop칩sito Geral (histogramas, scatter, etc.)
    # Verifica o nome exato da vari치vel de estado 'general_plot_fig'
    if st.session_state.get('general_plot_fig') is not None:
        st.subheader("Visualiza칞칚o de Gr치fico Gerada pelo Agente:")
        
        # Recupera o objeto Figura
        fig = st.session_state['general_plot_fig']
        
        # Comando CR칈TICO: Plota a figura no Streamlit
        st.pyplot(fig) 
        
        # Adiciona um bot칚o para limpar o gr치fico da tela
        if st.button("Limpar Gr치fico", key="clear_general_plot_btn"):
            # Limpa o objeto da mem칩ria do Streamlit e do Matplotlib
            st.session_state['general_plot_fig'] = None
            plt.close(fig) 
            st.rerun() # For칞a o Streamlit a redesenhar a p치gina sem o gr치fico

    st.divider() # Mant칠m o separador

    # main.py (L칩gica de entrada do usu치rio)
    if st.session_state.df is not None:
        if prompt := st.chat_input("Sua Pergunta de An치lise:"):
            
            # === A CORRE칂츾O CR칈TICA: LIMPAR ESTADO NO IN칈CIO ===
            # Limpa o gr치fico anterior. Se a Tool for chamada, ela salvar치 um novo objeto.
            st.session_state['general_plot_fig'] = None
            st.session_state['clustering_data'] = None
            # ===================================================

            # 1. Armazena o estado atual do objeto de plotagem ANTES de chamar o agente
            # Esta linha agora 칠 desnecess치ria se o estado foi limpo acima, mas manteremos
            # a verifica칞칚o de "depois" para o RERUN.
            # plot_state_before = st.session_state.get('general_plot_fig') is not None
            
            # 2. Adiciona a pergunta do usu치rio e exibe
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.write(prompt)

            # 3. Processa a pergunta com o Agente (Tempo de espera longo)
            with st.chat_message("assistant"):
                with st.spinner("Pensando e executando an치lises..."):
                    response = ask_agent(prompt) # Executa o agente

                # 4. Adiciona a resposta do Agente (texto)
                st.session_state.messages.append({"role": "assistant", "content": response})
                st.write(response) # Exibe o texto imediatamente

            # 5. VERIFICA칂츾O CR칈TICA E RERUN
            # Verifica se existe um objeto de plotagem geral NOVO na sess칚o (que s칩 existir치
            # se a Tool foi chamada e salvou um novo gr치fico ap칩s a limpeza inicial)
            is_general_plot_ready = st.session_state.get('general_plot_fig') is not None
            is_clustering_ready = st.session_state.get('clustering_data') is not None
            
            # O RERUN 칠 chamado apenas se uma Tool de plotagem foi executada (e salvou o objeto)
            if is_general_plot_ready or is_clustering_ready:
                st.rerun()

    # O script termina aqui.
else:
    # Garante que o usu치rio s칩 veja a interface de coleta da chave
    pass # Deixa o c칩digo rodar com a mensagem de aviso (warning) acima